# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import gateway_pb2 as gateway__pb2


class GatewayStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartService = channel.stream_stream(
                '/gateway.Gateway/StartService',
                request_serializer=gateway__pb2.Buffer.SerializeToString,
                response_deserializer=gateway__pb2.Buffer.FromString,
                )
        self.StopService = channel.stream_stream(
                '/gateway.Gateway/StopService',
                request_serializer=gateway__pb2.Buffer.SerializeToString,
                response_deserializer=gateway__pb2.Buffer.FromString,
                )
        self.Hynode = channel.stream_stream(
                '/gateway.Gateway/Hynode',
                request_serializer=gateway__pb2.Buffer.SerializeToString,
                response_deserializer=gateway__pb2.Buffer.FromString,
                )
        self.GetFile = channel.stream_stream(
                '/gateway.Gateway/GetFile',
                request_serializer=gateway__pb2.Buffer.SerializeToString,
                response_deserializer=gateway__pb2.Buffer.FromString,
                )
        self.GetServiceTar = channel.stream_stream(
                '/gateway.Gateway/GetServiceTar',
                request_serializer=gateway__pb2.Buffer.SerializeToString,
                response_deserializer=gateway__pb2.Buffer.FromString,
                )
        self.GetServiceCost = channel.stream_stream(
                '/gateway.Gateway/GetServiceCost',
                request_serializer=gateway__pb2.Buffer.SerializeToString,
                response_deserializer=gateway__pb2.Buffer.FromString,
                )


class GatewayServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartService(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopService(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Hynode(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFile(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServiceTar(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServiceCost(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GatewayServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartService': grpc.stream_stream_rpc_method_handler(
                    servicer.StartService,
                    request_deserializer=gateway__pb2.Buffer.FromString,
                    response_serializer=gateway__pb2.Buffer.SerializeToString,
            ),
            'StopService': grpc.stream_stream_rpc_method_handler(
                    servicer.StopService,
                    request_deserializer=gateway__pb2.Buffer.FromString,
                    response_serializer=gateway__pb2.Buffer.SerializeToString,
            ),
            'Hynode': grpc.stream_stream_rpc_method_handler(
                    servicer.Hynode,
                    request_deserializer=gateway__pb2.Buffer.FromString,
                    response_serializer=gateway__pb2.Buffer.SerializeToString,
            ),
            'GetFile': grpc.stream_stream_rpc_method_handler(
                    servicer.GetFile,
                    request_deserializer=gateway__pb2.Buffer.FromString,
                    response_serializer=gateway__pb2.Buffer.SerializeToString,
            ),
            'GetServiceTar': grpc.stream_stream_rpc_method_handler(
                    servicer.GetServiceTar,
                    request_deserializer=gateway__pb2.Buffer.FromString,
                    response_serializer=gateway__pb2.Buffer.SerializeToString,
            ),
            'GetServiceCost': grpc.stream_stream_rpc_method_handler(
                    servicer.GetServiceCost,
                    request_deserializer=gateway__pb2.Buffer.FromString,
                    response_serializer=gateway__pb2.Buffer.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gateway.Gateway', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Gateway(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartService(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/gateway.Gateway/StartService',
            gateway__pb2.Buffer.SerializeToString,
            gateway__pb2.Buffer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopService(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/gateway.Gateway/StopService',
            gateway__pb2.Buffer.SerializeToString,
            gateway__pb2.Buffer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Hynode(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/gateway.Gateway/Hynode',
            gateway__pb2.Buffer.SerializeToString,
            gateway__pb2.Buffer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/gateway.Gateway/GetFile',
            gateway__pb2.Buffer.SerializeToString,
            gateway__pb2.Buffer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServiceTar(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/gateway.Gateway/GetServiceTar',
            gateway__pb2.Buffer.SerializeToString,
            gateway__pb2.Buffer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServiceCost(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/gateway.Gateway/GetServiceCost',
            gateway__pb2.Buffer.SerializeToString,
            gateway__pb2.Buffer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
