syntax = "proto3";

import "onnx.proto";
import "celaut.proto";
import "solvers_dataset.proto";

package api;

// Solver
message Interpretation {
    repeated int32 variable = 1;
    optional bool satisfiable = 2; // Para decir que es insatisfactible se puede pasar únicamente
        // la lista vacía o bien marcar el booleano en falso. En caso de ser satisfactible se puede
        // pasar la interpretación y no hace falta pasar el booleano en true. Lo que no tendría sentido
        // sería pasar una interpretación con una lista de variables y el booleano en falso, en ese caso
        // el mensaje sería inválido.
}


// Random
message Clause {
    repeated int32 literal = 1;
}

message Cnf {
    repeated Clause clause = 1;
}

message Empty {}



message File {
    string file = 1;
}

message ServiceWithMeta {
    celaut.Any.Metadata meta = 1;
    celaut.Service service = 2;
}

message Tensor { // Like Onxx but with only SolverWithConfig'field elements.
    message NonEscalarDimension {    
        message NonEscalar {
            dataset.SolverWithConfig element = 1;
            oneof model {
                tensor_onnx.ModelProto escalar = 2;
                NonEscalarDimension non_escalar = 3;
            } 
        }
        repeated NonEscalar non_escalar = 1;
    }
    celaut.Service.Tensor specification = 1;
    oneof model {
        tensor_onnx.ModelProto escalar = 2;
        NonEscalarDimension non_escalar = 3;
    }
}

// GRPC.
message Buffer  {
    message Head {
        message Partition {
            map<int32, Partition> index = 1;
        }
        int32 index = 1;
        repeated Partition partitions = 2;
    }
    optional bytes chunk = 1;
    optional bool separator = 2;
    optional bool signal = 3;
    optional Head head = 4;
}

service Solver {
    rpc StartTrain ( stream Buffer) returns (stream Buffer) {}  // Empty -> Empty
    rpc StopTrain ( stream Buffer) returns (stream Buffer) {}  // Empty -> Empty
    rpc GetTensor ( stream Buffer) returns (stream Buffer) {}  // Empty -> Tensor
    rpc UploadSolver ( stream Buffer) returns (stream Buffer) {}  // ServiceWithMeta -> Empty
    rpc StreamLogs ( stream Buffer) returns (stream Buffer) {}  // Empty -> File
    rpc Solve ( stream Buffer) returns (stream Buffer) {}  // Cnf -> Interpretation
    rpc AddTensor( stream Buffer) returns (stream Buffer) {}  // Tensor -> Empty

    // Hasta que se implemente AddTensor.
    rpc GetDataSet ( stream Buffer) returns (stream Buffer) {}  // Empty -> dataset.DataSet
    rpc AddDataSet ( stream Buffer) returns (stream Buffer) {}  // dataset.DataSet -> Empty
}

service Random {
    rpc RandomCnf(stream Buffer) returns (stream Buffer) {} // Empty -> Cnf
}